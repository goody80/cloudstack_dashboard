#!/bin/bash
### CloudStack DashBoard tool has an easy control for the instance manages
### Made by ralf.yang@gsshop.com & goody80762@gmail.com
#
source cloudstack_dashboard.conf

## Disk add offering type
#diskOfferingId=3

CloudURL="http://$URL:$Ports/"

## API basic command
OptionValue="response=json&&zoneId=$zoneId&domainid=$domainid&account=$account"
BasedCommand="$CloudURL?$OptionValue&command"


##### Screen Start
echo " Wating....... "

LogDir="/data/logs/cloud_dashboard"
WorkLog="$LogDir/cloud_work.log"
LogChecker=`ls $WorkLog 2> /dev/null`
	if [[ $LogChecker = "" ]]
	then
		mkdir -p $LogDir
		touch $WorkLog
	fi



## Default value define
CommandX="r"
AliveResult="*"

while [ 1 -le 2 ]
do 

## List-up the VM
ListCommand=`curl "$BasedCommand=listVirtualMachines" 2> /dev/null | sed -e 's/ {\"id\"/\n\n {"id"/g' -e 's/{ "count":/\n/g' -e 's/ ,"virtualmachine" :/\n"virtualmachine" :/g' -e 's/ \] } }//g'`
Total=`echo "$ListCommand" | awk 'NR==2 {print}'`
	if [[ $Total = "" ]]
	then
		Total=0
	fi

## Temp file define
IPLists="$LogDir/IPList.txt"
Matching="$LogDir/Matching.txt"
InfoVM="$LogDir/InfoVM.txt"


## Value for printf
Count=1
gep=1
width=147
divider="================================="
divider=$divider$divider$divider$divider$divider
Format="%-4s %-14s %-15s %-11s %-30s %-17s %-7s %-6s %-12s %-20s %-1s\n"

## Make a Header of the list-up file
printf "" > $IPLists
printf "" > $Matching
printf "%$width.${width}s\n" "$divider"  > $InfoVM
printf "$Format" "| No" "|  Hostname" "|  Created" "|  State" "|  Template name" "|  Spec." "| Use%" "| Mem" "| Instance" "|  IP address" "|" >> $InfoVM
printf "%$width.${width}s\n" "$divider"  >> $InfoVM



### Array Define for the result patch
## Key value
PatchedVar=(VMID Hostname Created State Servicename Cpuused Templatename Ipaddress Memory Instance)
## Keyword for patch
PatchTarget=(" {id" "^name" "^created" "^state" "^serviceofferingname" "^cpuused" "^templatename" "^ipaddress" "^memory" "^instancename")

	## Parsing for listup
	while [ $Count -le $Total ]
	do
		Numbering=4
		let Numbering=$Numbering+$gep
		
			ACt=0
				while [ $ACt -lt ${#PatchedVar[@]}  ]
				do
					PatchCommand=`echo "$ListCommand" | awk 'NR=='$Numbering' {print}' | sed -e 's/,/\n/g' -e  's/"//g' -e 's/name:default//g' | grep -e "${PatchTarget[$ACt]}" | awk -F ':' '{print $2}'`
					eval ${PatchedVar[$ACt]}=\"$PatchCommand\"

				let ACt=$ACt+1
				done


		echo "$Ipaddress" >> $IPLists

		printf "$Format" "| $Count" "| $Hostname" "| $Created" "| $State" "| $Templatename" "| $Servicename" "| $Cpuused"  "| $Memory" "| $Instance" "| $Ipaddress: OFF" "|" >> $InfoVM

		echo " $Count $Hostname=$VMID" >> $Matching

	
	let gep=$gep+2
	let Count=$Count+1
	done


	## Network alive check
	NetworkAlive_Arry=(`nmap -sP -n -iL $IPLists |grep report | awk '{print $5}'`)
	if [[ ${NetworkAlive_Arry[@]} != "" ]]
	then
		NetCount=0
		while [ $NetCount -lt ${#NetworkAlive_Arry[@]} ]
		do
			sed -i "s/${NetworkAlive_Arry[$NetCount]}: OFF /${NetworkAlive_Arry[$NetCount]}: ON  /g" $InfoVM
		let NetCount=$NetCount+1
		done
	fi

## footer print
printf "%$width.${width}s\n" "$divider"  >> $InfoVM

## Print screen
clear
cat $InfoVM


## Menu print
SubWidth="40"
SubFormat="%-30s %-7s %-1s\n"

printf "%$SubWidth.${SubWidth}s\n" "$divider"
printf "$SubFormat" "| Description" "|  Key" "|"
printf "%$SubWidth.${SubWidth}s\n" "$divider"
printf "$SubFormat" "| Refresh the list" "| Enter" "|"
printf "$SubFormat" "| VM Start" "|  [s]" "|"
printf "$SubFormat" "| VM Stop" "|  [e]" "|"
printf "$SubFormat" "| VM Create" "|  [c]" "|"
printf "$SubFormat" "| VM Delete" "|  [d]" "|"
printf "$SubFormat" "| VM Recovery" "|  [r]" "|"
printf "$SubFormat" "| eXit " "|  [x]" "|"
printf "%$SubWidth.${SubWidth}s\n" "$divider"
printf " You can type the command with the host number(ex. s2 -> start VM for No. 2 server) \n" 
printf " :: Please insert a key for what you want ? \n"
read CommandX


RmHost=`echo "$CommandX"| sed -e 's/[a-z]//g'`
CommandX=`echo "$CommandX"| sed -e 's/[0-9]//g'`



	if [[ $CommandX != "" ]]
	then
		case "$CommandX" in
			c)
				Result=""
				TargetBlank=`tail -1 $Matching | awk '{print $1}'`
				BlankCount=1
					if [[ $TargetBlank != "" ]]
					then
							while [ $BlankCount -le $TargetBlank ]
							do
								let AddTotal=10#0+$BlankCount
								CheckDig=`echo $AddTotal | grep -e "^[0-9]$"`
									if [[ $CheckDig != "" ]]
									then
										AddTotal="0$AddTotal"
									fi
								NewHost=$account$AddTotal
								HostBlank=`grep $NewHost $Matching`
								if [[ $HostBlank = "" ]]
								then
									Result=$NewHost
									break
                  				fi
							let BlankCount=$BlankCount+1
							done
					fi


					if [[ $Result = "" ]]
					then
						let AddTotal=10#$AddTotal+1
						CheckDig=`echo $AddTotal | grep -e "^[0-9]$"`
							if [[ $CheckDig != "" ]]
							then
								AddTotal="0$AddTotal"
							fi
						NewHost=$account$AddTotal
      				fi
				



				echo "`date +%Y.%m.%d_%T`:: Create command" >> $WorkLog
				echo "$BasedCommand=deployVirtualMachine&serviceOfferingId=$serviceOfferingId&templateId=$templateId&name=$NewHost&displayname=$NewHost -> " 1>> $WorkLog
				curl "$BasedCommand=deployVirtualMachine&serviceOfferingId=$serviceOfferingId&templateId=$templateId&name=$NewHost&displayname=$NewHost" 1>> $WorkLog 2> /dev/null
				echo "" >> $WorkLog 
				;;
			x)
				rm -f $InfoVM $IPLists $Matching
				exit 0;
				;;
			d|r|s|e)
					## If selection for input already
					if [[ $RmHost = "" ]]
					then
						echo "Hostname Number ? [1 - $Total]"
						read RmHost
					fi

					if [[ $RmHost = "" ]]
					then
						echo " Please input the number exactly "
						read wait_command
					else
						RMID=`cat $Matching |egrep " $RmHost " | awk -F "=" '{print $2}'`
						TargetHost=`cat $InfoVM |egrep " $RmHost " | awk '{print $4}'`
							if [[ $TargetHost != "" ]]
							then
									case "$CommandX" in
									d)
										CommandM="Delete" ;;
									r)
										CommandM="Recovory" ;;
									s)
										CommandM="Start" ;;
									e)
										CommandM="Stop" ;;
									esac
								echo ""
								echo " [$CommandM] Target host is [ $TargetHost ]. Are sure $CommandM ? [y/n]"
								read Decide
									if [[ $Decide = y ]]
									then
										case "$CommandX" in
										d)	
											echo "`date +%Y.%m.%d_%T`:: Destroy command" >> $WorkLog
											echo "$BasedCommand=destroyVirtualMachine&id=$RMID -> " 1>> $WorkLog
											curl "$BasedCommand=destroyVirtualMachine&id=$RMID" 1>> $WorkLog 2> /dev/null
											echo "" >> $WorkLog ;;
										r)
											echo "`date +%Y.%m.%d_%T`:: Recovery command" >> $WorkLog
											echo "$BasedCommand=recoverVirtualMachine&id=$RMID -> " 1>> $WorkLog
											curl "$BasedCommand=recoverVirtualMachine&id=$RMID" 1>> $WorkLog 2> /dev/null
											echo "" >> $WorkLog ;;
										s)
											echo "`date +%Y.%m.%d_%T`:: Start command" >> $WorkLog
											echo "$BasedCommand=startVirtualMachine&id=$RMID -> " 1>> $WorkLog
											curl "$BasedCommand=startVirtualMachine&id=$RMID" 1>> $WorkLog 2> /dev/null
											echo "" >> $WorkLog ;;
										e)
											echo "`date +%Y.%m.%d_%T`:: Stop command" >> $WorkLog
											echo "$BasedCommand=stopVirtualMachine&id=$RMID -> " 1>> $WorkLog
											curl "$BasedCommand=stopVirtualMachine&id=$RMID" 1>> $WorkLog 2> /dev/null
											echo "" >> $WorkLog ;;
										esac
									else
										echo "$CommandM command has been Canceled !!"
										sleep 1
									fi
							else
								echo " Please input a number exactly "
								read wait_command
							fi	
					fi
				;;
			*)
				echo " Not existed command "
				read wait_command
			;;
		esac
	else
		echo "Waiting...."
	fi

done
